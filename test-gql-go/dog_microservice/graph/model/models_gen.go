// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

type MutationPayload interface {
	IsMutationPayload()
	GetStatus() bool
	GetErrors() []*MutationPayloadError
}

type Pagination interface {
	IsPagination()
	GetPage() int
	GetSize() int
	GetTotal() int
}

type CreateDog struct {
	Name    string `json:"name"`
	Age     int    `json:"age"`
	OwnerID string `json:"ownerId"`
}

type Dog struct {
	ID      string `json:"id"`
	Name    string `json:"name"`
	Age     int    `json:"age"`
	OwnerID string `json:"ownerId"`
	Owner   *User  `json:"owner"`
}

func (Dog) IsEntity() {}

type DogMutationPayload struct {
	Status   bool                    `json:"status"`
	Errors   []*MutationPayloadError `json:"errors"`
	Resource *Dog                    `json:"resource"`
}

func (DogMutationPayload) IsMutationPayload()   {}
func (this DogMutationPayload) GetStatus() bool { return this.Status }
func (this DogMutationPayload) GetErrors() []*MutationPayloadError {
	if this.Errors == nil {
		return nil
	}
	interfaceSlice := make([]*MutationPayloadError, 0, len(this.Errors))
	for _, concrete := range this.Errors {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

type DogPagination struct {
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
	Items []*Dog `json:"items"`
}

func (DogPagination) IsPagination()      {}
func (this DogPagination) GetPage() int  { return this.Page }
func (this DogPagination) GetSize() int  { return this.Size }
func (this DogPagination) GetTotal() int { return this.Total }

type MutationPayloadError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

type User struct {
	ID string `json:"id"`
}

func (User) IsEntity() {}
