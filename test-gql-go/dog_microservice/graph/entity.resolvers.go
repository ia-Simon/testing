package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"go_gql_tests_dog_microservice/graph/model"

	"github.com/sirupsen/logrus"
)

// FindDogByID is the resolver for the findDogByID field.
func (r *entityResolver) FindDogByID(ctx context.Context, id string) (*model.Dog, error) {
	logger := logrus.WithContext(ctx).WithFields(logrus.Fields{
		"action": "Entity#findDogByID",
		"id":     id,
	})
	logger.Info("Find dog by id")

	dogEntity, err := r.Resolver.DatabaseService.FindDogById(ctx, id)
	if err != nil {
		logger.WithError(err).Error("Failed to retrieve dog")
		return nil, nil
	}

	if dogEntity == nil {
		logger.Info("Dog not found")
		return nil, nil
	}

	dog := &model.Dog{
		ID:      dogEntity.Id,
		Name:    dogEntity.Name,
		Age:     dogEntity.Age,
		OwnerID: dogEntity.UserId,
	}

	logger.WithField("response", dog).Info("Dog found successfully")
	return dog, nil
}

// Entity returns EntityResolver implementation.
func (r *Resolver) Entity() EntityResolver { return &entityResolver{r} }

type entityResolver struct{ *Resolver }
