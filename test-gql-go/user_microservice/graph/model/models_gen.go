// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

type MutationPayload interface {
	IsMutationPayload()
	GetStatus() bool
	GetErrors() []*MutationPayloadError
}

type Pagination interface {
	IsPagination()
	GetPage() int
	GetSize() int
	GetTotal() int
}

type CreateUser struct {
	Name string `json:"name"`
	Age  int    `json:"age"`
}

type MutationPayloadError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

type User struct {
	ID   string `json:"id"`
	Name string `json:"name"`
	Age  int    `json:"age"`
}

func (User) IsEntity() {}

type UserMutationPayload struct {
	Status   bool                    `json:"status"`
	Errors   []*MutationPayloadError `json:"errors"`
	Resource *User                   `json:"resource"`
}

func (UserMutationPayload) IsMutationPayload()   {}
func (this UserMutationPayload) GetStatus() bool { return this.Status }
func (this UserMutationPayload) GetErrors() []*MutationPayloadError {
	if this.Errors == nil {
		return nil
	}
	interfaceSlice := make([]*MutationPayloadError, 0, len(this.Errors))
	for _, concrete := range this.Errors {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

type UserPagination struct {
	Page  int     `json:"page"`
	Size  int     `json:"size"`
	Total int     `json:"total"`
	Items []*User `json:"items"`
}

func (UserPagination) IsPagination()      {}
func (this UserPagination) GetPage() int  { return this.Page }
func (this UserPagination) GetSize() int  { return this.Size }
func (this UserPagination) GetTotal() int { return this.Total }
